package com.test.wonder;

import java.io.BufferedInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Arrays;

import org.apache.commons.lang.StringUtils;

public class Test
{
	// smokin-aces-2.data
	static String featureFilename = "D:/Download/wonder/results/smokin-aces-2.data";
	static byte[] allFeatures;

	static
	{
		try
		{
			Test.allFeatures = Test.toByteArray(Test.featureFilename);
		}
		catch (IOException e)
		{
			e.printStackTrace();
		}
	}

	public static int getHashCode(byte b)
	{
		int hashcode = 0;
		Byte byteObj = new Byte(b);
		hashcode = byteObj.hashCode();
		return hashcode;
	}

	public static int getHashCodeValue(String str)
	{
		int value = 0;
		char[] charArr = str.toCharArray();
		int len = charArr.length;
		for (int i = 0; i < len; i++)
		{
			if ('1' == charArr[i])
			{
				value += i;
			}
		}

		return value;
	}

	/**
	 * the traditional io way
	 * 
	 * @param filename
	 * @return
	 * @throws IOException
	 */
	public static byte[] toByteArray(String filename) throws IOException
	{

		File f = new File(filename);
		if (!f.exists())
		{
			throw new FileNotFoundException(filename);
		}

		ByteArrayOutputStream bos = new ByteArrayOutputStream((int) f.length());
		BufferedInputStream in = null;
		try
		{
			in = new BufferedInputStream(new FileInputStream(f));
			int buf_size = 1024;
			byte[] buffer = new byte[buf_size];
			int len = 0;
			while (-1 != (len = in.read(buffer, 0, buf_size)))
			{
				bos.write(buffer, 0, len);
			}
			return bos.toByteArray();
		}
		catch (IOException e)
		{
			e.printStackTrace();
			throw e;
		}
		finally
		{
			try
			{
				in.close();
			}
			catch (IOException e)
			{
				e.printStackTrace();
			}
			bos.close();
		}
	}

	public static byte[] getFeature(int from, int to)
	{
		byte[] feature = null;
		feature = Arrays.copyOfRange(Test.allFeatures, from, to);
		return feature;
	}

	/**
	 * 计算两个二进制字符串之间的距离。 计算方式： 1. 如果任意一个字符串为空，则两者距离为最大距离； 2.
	 * 如果两者长度不一样，则两者距离为最大距离； 3. 非空且长度相同的两个字符串的距离为两者的异或值中1的个数；
	 * 
	 * @param binaryString1
	 * @param binaryString2
	 * @return
	 */
	public static int getDistance(String binaryString1, String binaryString2)
	{
		// 默认的最大距离
		int distance = 99999999;

		if (null == binaryString1 || null == binaryString2)
		{
			return distance;
		}

		if (binaryString1.length() != binaryString2.length())
		{
			return distance;
		}

		if (binaryString1.equals(binaryString2))
		{
			return 0;
		}

		distance = Math.abs(Test.getHashCodeValue(binaryString1) - Test.getHashCodeValue(binaryString2));

		/*
		// 计算两者距离
		distance = 0;
		for (int i = 0; i < binaryString1.length(); i++)
		{
			if (Integer.valueOf(binaryString1.charAt(i)) != Integer.valueOf(binaryString2.charAt(i)))
			{
				distance++;
			}
		}
		*/

		return distance;
	}

	public static String getFeatureBinaryString(byte[] feature)
	{
		String featureBinaryString = "";
		for (int i = 0; i < feature.length; i++)
		{
			int hashcode = Test.getHashCode(feature[i]) + 128;
			String binaryString = Integer.toBinaryString(hashcode);
			Integer binaryInteger = Integer.valueOf(binaryString);
			String formatedBinaryString = String.format("%08d", binaryInteger);
			featureBinaryString += formatedBinaryString;
		}

		return featureBinaryString;
	}

	public static void main(String[] args)
	{
		String a
		String b
		//		b
		b = "1";

		System.out.println("StringUtils.getLevenshteinDistance=" + StringUtils.getLevenshteinDistance(a, b));
		System.out.println("getDistance(a, b)=" + Test.getDistance(a, b));
		System.out.println("getValue(a)=" + Test.getHashCodeValue(a));
		System.out.println("getValue(b)=" + Test.getHashCodeValue(b));
		System.out.println("Math.abs(getValue(a) - getValue(b))="
		        + Math.abs(Test.getHashCodeValue(a) - Test.getHashCodeValue(b)));
	}
}
